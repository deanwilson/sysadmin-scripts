#!/usr/bin/ruby
require 'github_api'
require 'optparse'

options = {
  batch_delay: 3,
}

OptionParser.new do |opts|
  opts.banner = <<-ENDOFUSAGE
    list-configured-ci queries the repositories owned by the
    given user or organisation and searches for Continious Integration
    service configuration and shows which ones each repo is configured
    to use

    Usage:
      $ list-configured-ci --user deanwilson
        ... snip ...
        puppet-lint-yumrepo_gpgcheck_enabled-check
          - Travis CI
          - Jenkins
        puppet-lint_duplicate_class_parameters-check
          - Travis CI
          - Jenkins
        puppet-multitemplate
          - CircleCI
          - Jenkins
        ... snip ...

  ENDOFUSAGE

  opts.on('-a', '--archived',
          'check archived repos.') { |v| options[:archived] = v }

  opts.on('--batch-delay DELAY', '--delay DELAY',
          'number of seconds to sleep between batches') { |delay| options[:batch_delay] = delay.to_i }

  opts.on('--size SIZE', '--batch-size=SIZE',
          'split requests into groups of this size to avoid API limits') { |size| options[:batch_size] = size.to_i }

  opts.on('-d', '--debug',
          'show debug information.') { |v| options[:debug] = v }

  opts.on('-n', '--no-config',
          'show repos with no CI configured. Disabled by default.') { |v| options[:show_empty] = v }

# TODO
#  opts.on('-s', '--summary',
#         'summarise.') { |v| options[:summary] = v }
#
  opts.on('-u', '--user USER',
          'github user to query.') { |user| options[:user] = user || ARGV[0] }

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
end.parse!

if options[:user].nil?
  if ARGV[0]
    options[:user] = ARGV[0]
  else
    puts 'Please supply a github username'
    exit 1
  end
end

config = {
  user: options[:user],
  auto_pagination: true,
  token: ENV['GITHUB_TOKEN']
}

github = Github.new oauth_token: config[:token]

# don't check forks. We don't control their configurations
repos = github.repos.list(config).reject { |r| r.fork }

# ignore archived repos by default.
repos.reject! { |r| r.archived } unless options[:archived]

# TODO:  can you use regex in the `get` call? Doesn't appear so
ci_configs = {
  'Travis CI': [
    '.travis.yml',
    '.travis.yaml',
  ],
  'CircleCI': [
    '.circleci/config.yml',
    '.circleci/config.yaml',
  ],
  'Jenkins': [ 'Jenkinsfile', ],
  'GitHub Actions': [ '.github/workflows/', ],
  'AWS CodeBuild': [
    '.buildspec.yml',
    '.buildspec.yaml',
  ],
  'GitLab CI': [
    '.gitlab-ci.yml',
    '.gitlab-ci.yaml',
  ],
  'DroneCI': [
    '.drone.yml',
    '.drone.yml',
  ],
  'Azure Devops': [
    'azure-pipelines.yml',
    'azure-pipelines.yaml',
  ],
  # Google cloud build uses the Dockerfile
  # which creates too many false positives.
}

repo_ci = {}
repo_count = 0
repos.each do |repo|
  repo_count += 1
  repo_name = repo['name']

  puts " - checking #{repo_name}" if options[:debug]
  active_config = {}

  ci_configs.each do |ci_system, ci_paths|
    ci_paths.each do |ci_path|
      puts "  * checking #{repo_name} == #{ci_system} == #{ci_path}" if options[:debug]
      begin
        config = github.repos.contents.get options[:user], repo_name, ci_path
      rescue Github::Error::NotFound
        puts "  * checking #{repo_name} == #{ci_system} == #{ci_path} == MISS" if options[:debug]
        next # this exception means the file was not found so check the next
      else
        puts "  * checking #{repo_name} == #{ci_system} == #{ci_path} == HIT" if options[:debug]

        active_config[ci_system] = true

        # special case GH Actions as it's a directory of possible configs
        if ci_system == 'GitHub Actions'
          # only consider it active if there is one .yml or .yaml file
          unless config.any? { |c| c.name.match(/.*.ya?ml/i) }
            active_config[ci_system] = false
          end
        end
      end
      # some providers have multiple files, skip to next provider when one matches
      break if active_config[ci_system]
    end
  end

  if options[:batch_size]
    if repo_count % options[:batch_size] == 0
      puts " == Batch complete - sleeping for #{options[:batch_delay]}" if options[:debug]
      sleep options[:batch_delay]
    end
  end

  repo_ci[repo_name] = active_config
end

repo_ci.keys.each do |repo_name|
  # only print the name if we have CI config or show_empty is set
  if repo_ci[repo_name].keys.any? || options[:show_empty]
    puts repo_name
  end

  if repo_ci[repo_name].keys.empty?
    puts '  - no detected CI systems configured' if options[:show_empty]
    next
  end

  repo_ci[repo_name].keys.each do |ci|
    puts "  - #{ci}"
  end
end
